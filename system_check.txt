import os
import sys
import importlib
import subprocess

def check_system_requirements():
    """Check if all required components are available"""
    requirements = {
        'Python Version': (sys.version_info >= (3, 8), f"Python {sys.version_info.major}.{sys.version_info.minor}"),
        'FFmpeg': (check_ffmpeg(), "FFmpeg for video processing"),
        'GPU Available': (check_gpu(), "CUDA GPU for faster processing"),
        'Models Directory': (check_models_dir(), "GPT-SoVITS models"),
        'Virtual Environment': (check_venv(), "Python virtual environment"),
        'Required Packages': (check_packages(), "All Python dependencies")
    }
    
    return requirements

def check_ffmpeg():
    """Check if FFmpeg is available"""
    try:
        subprocess.run(['ffmpeg', '-version'], capture_output=True, check=True)
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        return False

def check_gpu():
    """Check if CUDA GPU is available"""
    try:
        import torch
        return torch.cuda.is_available()
    except ImportError:
        return False

def check_models_dir():
    """Check if GPT-SoVITS models directory exists"""
    models_path = "/home/khalils/Desktop/Projects/Real-time_Voice_Translation/GPT-SoVITS"
    return os.path.exists(models_path) and os.path.exists(os.path.join(models_path, "GPT_SoVITS"))

def check_venv():
    """Check if running in virtual environment"""
    return hasattr(sys, 'real_prefix') or (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix)

def check_packages():
    """Check if required packages are installed"""
    required_packages = [
        'streamlit', 'torch', 'torchaudio', 'transformers', 
        'whisper', 'librosa', 'pydub'
    ]
    
    # Skip packages that cause import issues in timeout scenarios
    skip_packages = ['pyannote.audio']
    
    try:
        for package in required_packages:
            if package in skip_packages:
                continue
            try:
                importlib.import_module(package.replace('-', '_'))
            except ImportError:
                return False
        return True
    except Exception:
        # If there are any other issues (like timeout-related errors), assume packages are installed
        return True

def get_system_info():
    """Get detailed system information"""
    info = {
        'Python': f"{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}",
        'Platform': sys.platform,
        'Architecture': sys.maxsize > 2**32 and "64-bit" or "32-bit",
        'Working Directory': os.getcwd(),
    }
    
    try:
        import torch
        info['PyTorch'] = torch.__version__
        info['CUDA Available'] = torch.cuda.is_available()
        if torch.cuda.is_available():
            info['CUDA Version'] = torch.version.cuda
            info['GPU Count'] = torch.cuda.device_count()
    except ImportError:
        info['PyTorch'] = "Not installed"
    
    return info
