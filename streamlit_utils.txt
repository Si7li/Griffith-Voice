# Custom CSS for the Streamlit app
import os

def get_custom_css():
    return """
    <style>
    .main > div {
        padding-top: 2rem;
    }
    
    .stProgress .st-bo {
        background-color: #e0e0e0;
    }
    
    .stProgress .st-bp {
        background-color: #1f77b4;
    }
    
    .upload-info {
        background-color: #f0f8ff;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #1f77b4;
        margin: 1rem 0;
    }
    
    .success-box {
        background-color: #f0fff0;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #32cd32;
        margin: 1rem 0;
    }
    
    .error-box {
        background-color: #fff0f0;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #ff6b6b;
        margin: 1rem 0;
    }
    
    .parameter-help {
        font-size: 0.8rem;
        color: #666;
        font-style: italic;
    }
    
    .stTabs [data-baseweb="tab-list"] {
        gap: 2px;
    }
    
    .stTabs [data-baseweb="tab"] {
        height: 50px;
        padding-left: 20px;
        padding-right: 20px;
    }
    
    .speaker-card {
        background-color: #f8f9fa;
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 0.5rem 0;
        border: 1px solid #e9ecef;
    }
    
    .segment-card {
        background-color: #ffffff;
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 0.5rem 0;
        border: 1px solid #dee2e6;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }
    </style>
    """

def get_processing_steps():
    return [
        "üé¨ Uploading video file",
        "üéµ Extracting audio track", 
        "üé§ Separating vocals from music",
        "üë• Identifying different speakers",
        "‚úÇÔ∏è Extracting speech segments",
        "üìù Transcribing speech to text",
        "üåç Translating to target language",
        "üé≠ Sampling voice characteristics",
        "üó£Ô∏è Synthesizing translated speech",
        "üéß Assembling final audio",
        "üé¨ Creating final video"
    ]

def validate_video_file(file):
    """Validate uploaded video file"""
    if file is None:
        return False, "No file uploaded"
    
    # Check file size (limit to 500MB)
    if file.size > 500 * 1024 * 1024:
        return False, "File too large (max 500MB)"
    
    # Check file extension
    allowed_extensions = ['.mp4', '.avi', '.mov', '.mkv']
    file_extension = os.path.splitext(file.name)[1].lower()
    if file_extension not in allowed_extensions:
        return False, f"Unsupported format. Use: {', '.join(allowed_extensions)}"
    
    return True, "File is valid"

def get_language_display_name(code):
    """Get human-readable language names"""
    language_names = {
        'ja': 'Japanese (Êó•Êú¨Ë™û)',
        'en': 'English',
        'es': 'Spanish (Espa√±ol)',
        'fr': 'French (Fran√ßais)',
        'de': 'German (Deutsch)',
        'it': 'Italian (Italiano)',
        'pt': 'Portuguese (Portugu√™s)',
        'ru': 'Russian (–†—É—Å—Å–∫–∏–π)',
        'ko': 'Korean (ÌïúÍµ≠Ïñ¥)',
        'zh': 'Chinese (‰∏≠Êñá)'
    }
    return language_names.get(code, code)
